{
  "resourceType": "Bundle",
  "type": "transaction",
  "entry": [
    {
      "fullUrl": "urn:uuid:d331894f-12bb-4406-9bcf-0cab175f80d0",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/typescript",
        "data": "aW1wb3J0IHsgQm90RXZlbnQsIE1lZHBsdW1DbGllbnQgfSBmcm9tICdAbWVkcGx1bS9jb3JlJzsKaW1wb3J0IHsgRG9jdW1lbnRSZWZlcmVuY2UsIFJlc291cmNlLCBRdWVzdGlvbm5haXJlLCBRdWVzdGlvbm5haXJlUmVzcG9uc2UgfSBmcm9tICdAbWVkcGx1bS9maGlydHlwZXMnOwppbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXInOwoKLyoqCiAqIEEgTWVkcGx1bSBCb3QgdGhhdCBwcm9jZXNzZXMgZG9jdW1lbnRzIHVzaW5nIHRoZSBsYW5nMmZoaXIgQVBJLgogKiAKICogVGhlIGJvdCB3aWxsOgogKiAxLiBEb3dubG9hZCB0aGUgZG9jdW1lbnQgZnJvbSB0aGUgcHJvdmlkZWQgVVJMCiAqIDIuIFNlbmQgdGhlIGRvY3VtZW50IHRvIHRoZSBsYW5nMmZoaXIgQVBJCiAqIDMuIENyZWF0ZSBhIEZISVIgcmVzb3VyY2Ugb2YgdGhlIHR5cGUgc3BlY2lmaWVkIGluIHRoZSBpbnB1dAogKiAKICogUmVxdWlyZWQgYm90IHNlY3JldHM6IChZb3UgbmVlZCB0byBoYXZlIGFuIGFjdGl2ZSBQaGVub01MIHN1YnNjcmlwdGlvbiB0byB1c2UgdGhpcyBib3QpCiAqIC0gUEhFTk9NTF9FTUFJTDogWW91ciBQaGVub01MIEFQSSBlbWFpbAogKiAtIFBIRU5PTUxfUEFTU1dPUkQ6IFlvdXIgUGhlbm9NTCBBUEkgcGFzc3dvcmQKICovCgppbnRlcmZhY2UgRG9jdW1lbnRSZXF1ZXN0IHsKICB2ZXJzaW9uOiBzdHJpbmc7CiAgcmVzb3VyY2U6IHN0cmluZzsKICBjb250ZW50OiBzdHJpbmc7CiAgZmlsZVR5cGU6IHN0cmluZzsKfQoKaW50ZXJmYWNlIERvY0JvdElucHV0IHsKICBkb2NyZWY6IERvY3VtZW50UmVmZXJlbmNlOwogIHJlc291cmNlVHlwZTogJ1F1ZXN0aW9ubmFpcmUnIHwgJ1F1ZXN0aW9ubmFpcmVSZXNwb25zZSc7Cn0KCmNvbnN0IFBIRU5PTUxfQVBJX1VSTCA9ICJodHRwczovL2V4cGVyaW1lbnQucGhlbm8ubWwiOwoKCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKAogIG1lZHBsdW06IE1lZHBsdW1DbGllbnQsIAogIGV2ZW50OiBCb3RFdmVudDxEb2NCb3RJbnB1dD4KKTogUHJvbWlzZTxSZXNvdXJjZT4gewogIHRyeSB7CgogICAgY29uc3QgaW5wdXREb2NSZWYgPSBldmVudC5pbnB1dC5kb2NyZWY7CiAgICBjb25zdCBpbnB1dFJlc291cmNlVHlwZSA9IGV2ZW50LmlucHV0LnJlc291cmNlVHlwZTsKICAgIAogICAgaWYgKCFpbnB1dERvY1JlZikgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1lZGlhIGlucHV0IHByb3ZpZGVkIHRvIGJvdCcpOwogICAgfQogICAgaWYgKCFpbnB1dFJlc291cmNlVHlwZSkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHRhcmdldCByZXNvdXJjZSB0eXBlIHByb3ZpZGVkJyk7CiAgICB9CgogICAgaWYgKCFbJ1F1ZXN0aW9ubmFpcmUnLCAnUXVlc3Rpb25uYWlyZVJlc3BvbnNlJ10uaW5jbHVkZXMoaW5wdXRSZXNvdXJjZVR5cGUpKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgcmVzb3VyY2UgdHlwZTogJHtpbnB1dFJlc291cmNlVHlwZX1gKTsKICAgIH0KICAgIAogICAgaWYgKCFpbnB1dERvY1JlZi5jb250ZW50Py5bMF0uYXR0YWNobWVudD8udXJsKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignRG9jdW1lbnRSZWZlcmVuY2UgcmVzb3VyY2UgbXVzdCBoYXZlIGNvbnRlbnQudXJsJyk7CiAgICB9CgogICAgY29uc3QgdGFyZ2V0UmVzb3VyY2VUeXBlID0gaW5wdXRSZXNvdXJjZVR5cGUudG9Mb3dlckNhc2UoKTsKCiAgICAvLyBEb3dubG9hZCB0aGUgZmlsZSBjb250ZW50IGZyb20gdGhlIHByZS1zaWduZWQgVVJMCiAgICBjb25zdCBibG9iID0gYXdhaXQgbWVkcGx1bS5kb3dubG9hZChpbnB1dERvY1JlZi5jb250ZW50Py5bMF0uYXR0YWNobWVudD8udXJsKTsKICAgIGNvbnN0IGFycmF5QnVmZmVyID0gYXdhaXQgYmxvYi5hcnJheUJ1ZmZlcigpOwogICAgY29uc3QgY29udGVudCA9IEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyKS50b1N0cmluZygnYmFzZTY0Jyk7CgogICAgY29uc3QgZW1haWwgPSBldmVudC5zZWNyZXRzWyJQSEVOT01MX0VNQUlMIl0udmFsdWVTdHJpbmcgYXMgc3RyaW5nOwogICAgY29uc3QgcGFzc3dvcmQgPSBldmVudC5zZWNyZXRzWyJQSEVOT01MX1BBU1NXT1JEIl0udmFsdWVTdHJpbmcgYXMgc3RyaW5nOwoKICAgIC8vIENyZWF0ZSBiYXNlNjQgZW5jb2RlZCBjcmVkZW50aWFscyBmb3IgQmFzaWMgQXV0aAogICAgY29uc3QgY3JlZGVudGlhbHMgPSBCdWZmZXIuZnJvbShgJHtlbWFpbH06JHtwYXNzd29yZH1gKS50b1N0cmluZygnYmFzZTY0Jyk7CiAgICAvLyBHZXQgYXV0aCB0b2tlbiB1c2luZyBCYXNpYyBBdXRoCiAgICBjb25zdCBhdXRoUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChQSEVOT01MX0FQSV9VUkwgKyAnL2F1dGgvdG9rZW4nLCB7CiAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICBoZWFkZXJzOiB7IAogICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmFzaWMgJHtjcmVkZW50aWFsc31gCiAgICAgIH0sCiAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNvbm5lY3QgdG8gUGhlbm9NTCBBUEk6ICR7ZXJyb3IubWVzc2FnZX1gKTsKICAgIH0pOyAKICAgIAogICAgaWYgKCFhdXRoUmVzcG9uc2Uub2spIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBBdXRoZW50aWNhdGlvbiBmYWlsZWQ6ICR7YXV0aFJlc3BvbnNlLnN0YXR1c30gJHthdXRoUmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTsKICAgIH0KCiAgICBjb25zdCB7IHRva2VuOiBiZWFyZXJUb2tlbiB9ID0gYXdhaXQgYXV0aFJlc3BvbnNlLmpzb24oKSBhcyB7IHRva2VuOiBzdHJpbmcgfTsKICAgIGlmICghYmVhcmVyVG9rZW4pIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB0b2tlbiByZWNlaXZlZCBmcm9tIGF1dGggcmVzcG9uc2UnKTsKICAgIH0KICAgIAogICAgLy8gUHJlcGFyZSBkb2N1bWVudCByZXF1ZXN0CiAgICBjb25zdCBkb2N1bWVudFJlcXVlc3Q6IERvY3VtZW50UmVxdWVzdCA9IHsKICAgICAgdmVyc2lvbjogJ1I0JywgLy8gRkhJUiBSNAogICAgICByZXNvdXJjZTogdGFyZ2V0UmVzb3VyY2VUeXBlLAogICAgICBjb250ZW50OiBjb250ZW50LAogICAgICBmaWxlVHlwZTogaW5wdXREb2NSZWYuY29udGVudD8uWzBdLmF0dGFjaG1lbnQ/LmNvbnRlbnRUeXBlIHx8ICdhcHBsaWNhdGlvbi9wZGYnCiAgICB9OwoKICAgIC8vIENhbGwgbGFuZzJmaGlyL2RvY3VtZW50IGVuZHBvaW50CiAgICBjb25zdCBkb2N1bWVudFJlc3BvbnNlID0gYXdhaXQgZmV0Y2goUEhFTk9NTF9BUElfVVJMICsgJy9sYW5nMmZoaXIvZG9jdW1lbnQnLCB7CiAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkb2N1bWVudFJlcXVlc3QpLCAKICAgICAgaGVhZGVyczogeyAKICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHtiZWFyZXJUb2tlbn1gLAogICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgICB9LAogICAgfSkuY2F0Y2goZXJyb3IgPT4gewogICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBjb25uZWN0IHRvIExhbmcyRkhJUiBEb2N1bWVudCBBUEk6ICR7ZXJyb3IubWVzc2FnZX1gKTsKICAgIH0pOwoKICAgIGlmICghZG9jdW1lbnRSZXNwb25zZS5vaykgewogICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCBkb2N1bWVudFJlc3BvbnNlLnRleHQoKS5jYXRjaCgoKSA9PiAnTm8gZXJyb3IgZGV0YWlscyBhdmFpbGFibGUnKTsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBEb2N1bWVudCBwcm9jZXNzaW5nIGZhaWxlZDogJHtkb2N1bWVudFJlc3BvbnNlLnN0YXR1c30gJHtkb2N1bWVudFJlc3BvbnNlLnN0YXR1c1RleHR9IC0gJHtlcnJvclRleHR9YCk7CiAgICB9CgogICAgY29uc3QgZ2VuZXJhdGVkUmVzb3VyY2UgPSBhd2FpdCBkb2N1bWVudFJlc3BvbnNlLmpzb24oKS5jYXRjaChlcnJvciA9PiB7CiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBhcnNlIGRvY3VtZW50IHJlc3BvbnNlOiAke2Vycm9yLm1lc3NhZ2V9YCk7CiAgICB9KTsKCiAgICByZXR1cm4gZ2VuZXJhdGVkUmVzb3VyY2UgYXMgUXVlc3Rpb25uYWlyZSB8IFF1ZXN0aW9ubmFpcmVSZXNwb25zZTsgCiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHRocm93IG5ldyBFcnJvcihgQm90IGV4ZWN1dGlvbiBmYWlsZWQ6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWApOwogIH0KfQoK"
      }
    },
    {
      "fullUrl": "urn:uuid:877af9b4-1360-4311-8e4c-6ae5eaa9614f",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/javascript",
        "data": "InVzZSBzdHJpY3QiOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwpleHBvcnRzLmhhbmRsZXIgPSBoYW5kbGVyOwpjb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoImJ1ZmZlciIpOwpjb25zdCBQSEVOT01MX0FQSV9VUkwgPSAiaHR0cHM6Ly9leHBlcmltZW50LnBoZW5vLm1sIjsKYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihtZWRwbHVtLCBldmVudCkgewogICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7CiAgICB0cnkgewogICAgICAgIGNvbnN0IGlucHV0RG9jUmVmID0gZXZlbnQuaW5wdXQuZG9jcmVmOwogICAgICAgIGNvbnN0IGlucHV0UmVzb3VyY2VUeXBlID0gZXZlbnQuaW5wdXQucmVzb3VyY2VUeXBlOwogICAgICAgIGlmICghaW5wdXREb2NSZWYpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBtZWRpYSBpbnB1dCBwcm92aWRlZCB0byBib3QnKTsKICAgICAgICB9CiAgICAgICAgaWYgKCFpbnB1dFJlc291cmNlVHlwZSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHRhcmdldCByZXNvdXJjZSB0eXBlIHByb3ZpZGVkJyk7CiAgICAgICAgfQogICAgICAgIGlmICghWydRdWVzdGlvbm5haXJlJywgJ1F1ZXN0aW9ubmFpcmVSZXNwb25zZSddLmluY2x1ZGVzKGlucHV0UmVzb3VyY2VUeXBlKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHJlc291cmNlIHR5cGU6ICR7aW5wdXRSZXNvdXJjZVR5cGV9YCk7CiAgICAgICAgfQogICAgICAgIGlmICghKChfYiA9IChfYSA9IGlucHV0RG9jUmVmLmNvbnRlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVswXS5hdHRhY2htZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudXJsKSkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RvY3VtZW50UmVmZXJlbmNlIHJlc291cmNlIG11c3QgaGF2ZSBjb250ZW50LnVybCcpOwogICAgICAgIH0KICAgICAgICBjb25zdCB0YXJnZXRSZXNvdXJjZVR5cGUgPSBpbnB1dFJlc291cmNlVHlwZS50b0xvd2VyQ2FzZSgpOwogICAgICAgIC8vIERvd25sb2FkIHRoZSBmaWxlIGNvbnRlbnQgZnJvbSB0aGUgcHJlLXNpZ25lZCBVUkwKICAgICAgICBjb25zdCBibG9iID0gYXdhaXQgbWVkcGx1bS5kb3dubG9hZCgoX2QgPSAoX2MgPSBpbnB1dERvY1JlZi5jb250ZW50KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2NbMF0uYXR0YWNobWVudCkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnVybCk7CiAgICAgICAgY29uc3QgYXJyYXlCdWZmZXIgPSBhd2FpdCBibG9iLmFycmF5QnVmZmVyKCk7CiAgICAgICAgY29uc3QgY29udGVudCA9IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyKS50b1N0cmluZygnYmFzZTY0Jyk7CiAgICAgICAgY29uc3QgZW1haWwgPSBldmVudC5zZWNyZXRzWyJQSEVOT01MX0VNQUlMIl0udmFsdWVTdHJpbmc7CiAgICAgICAgY29uc3QgcGFzc3dvcmQgPSBldmVudC5zZWNyZXRzWyJQSEVOT01MX1BBU1NXT1JEIl0udmFsdWVTdHJpbmc7CiAgICAgICAgLy8gQ3JlYXRlIGJhc2U2NCBlbmNvZGVkIGNyZWRlbnRpYWxzIGZvciBCYXNpYyBBdXRoCiAgICAgICAgY29uc3QgY3JlZGVudGlhbHMgPSBidWZmZXJfMS5CdWZmZXIuZnJvbShgJHtlbWFpbH06JHtwYXNzd29yZH1gKS50b1N0cmluZygnYmFzZTY0Jyk7CiAgICAgICAgLy8gR2V0IGF1dGggdG9rZW4gdXNpbmcgQmFzaWMgQXV0aAogICAgICAgIGNvbnN0IGF1dGhSZXNwb25zZSA9IGF3YWl0IGZldGNoKFBIRU5PTUxfQVBJX1VSTCArICcvYXV0aC90b2tlbicsIHsKICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCYXNpYyAke2NyZWRlbnRpYWxzfWAKICAgICAgICAgICAgfSwKICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNvbm5lY3QgdG8gUGhlbm9NTCBBUEk6ICR7ZXJyb3IubWVzc2FnZX1gKTsKICAgICAgICB9KTsKICAgICAgICBpZiAoIWF1dGhSZXNwb25zZS5vaykgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEF1dGhlbnRpY2F0aW9uIGZhaWxlZDogJHthdXRoUmVzcG9uc2Uuc3RhdHVzfSAke2F1dGhSZXNwb25zZS5zdGF0dXNUZXh0fWApOwogICAgICAgIH0KICAgICAgICBjb25zdCB7IHRva2VuOiBiZWFyZXJUb2tlbiB9ID0gYXdhaXQgYXV0aFJlc3BvbnNlLmpzb24oKTsKICAgICAgICBpZiAoIWJlYXJlclRva2VuKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdG9rZW4gcmVjZWl2ZWQgZnJvbSBhdXRoIHJlc3BvbnNlJyk7CiAgICAgICAgfQogICAgICAgIC8vIFByZXBhcmUgZG9jdW1lbnQgcmVxdWVzdAogICAgICAgIGNvbnN0IGRvY3VtZW50UmVxdWVzdCA9IHsKICAgICAgICAgICAgdmVyc2lvbjogJ1I0JywgLy8gRkhJUiBSNAogICAgICAgICAgICByZXNvdXJjZTogdGFyZ2V0UmVzb3VyY2VUeXBlLAogICAgICAgICAgICBjb250ZW50OiBjb250ZW50LAogICAgICAgICAgICBmaWxlVHlwZTogKChfZiA9IChfZSA9IGlucHV0RG9jUmVmLmNvbnRlbnQpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZVswXS5hdHRhY2htZW50KSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YuY29udGVudFR5cGUpIHx8ICdhcHBsaWNhdGlvbi9wZGYnCiAgICAgICAgfTsKICAgICAgICAvLyBDYWxsIGxhbmcyZmhpci9kb2N1bWVudCBlbmRwb2ludAogICAgICAgIGNvbnN0IGRvY3VtZW50UmVzcG9uc2UgPSBhd2FpdCBmZXRjaChQSEVOT01MX0FQSV9VUkwgKyAnL2xhbmcyZmhpci9kb2N1bWVudCcsIHsKICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRvY3VtZW50UmVxdWVzdCksCiAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke2JlYXJlclRva2VufWAsCiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgICAgICAgICB9LAogICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gY29ubmVjdCB0byBMYW5nMkZISVIgRG9jdW1lbnQgQVBJOiAke2Vycm9yLm1lc3NhZ2V9YCk7CiAgICAgICAgfSk7CiAgICAgICAgaWYgKCFkb2N1bWVudFJlc3BvbnNlLm9rKSB7CiAgICAgICAgICAgIGNvbnN0IGVycm9yVGV4dCA9IGF3YWl0IGRvY3VtZW50UmVzcG9uc2UudGV4dCgpLmNhdGNoKCgpID0+ICdObyBlcnJvciBkZXRhaWxzIGF2YWlsYWJsZScpOwogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERvY3VtZW50IHByb2Nlc3NpbmcgZmFpbGVkOiAke2RvY3VtZW50UmVzcG9uc2Uuc3RhdHVzfSAke2RvY3VtZW50UmVzcG9uc2Uuc3RhdHVzVGV4dH0gLSAke2Vycm9yVGV4dH1gKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZ2VuZXJhdGVkUmVzb3VyY2UgPSBhd2FpdCBkb2N1bWVudFJlc3BvbnNlLmpzb24oKS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBhcnNlIGRvY3VtZW50IHJlc3BvbnNlOiAke2Vycm9yLm1lc3NhZ2V9YCk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGdlbmVyYXRlZFJlc291cmNlOwogICAgfQogICAgY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBCb3QgZXhlY3V0aW9uIGZhaWxlZDogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcil9YCk7CiAgICB9Cn0KLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGFuZzJmaGlyLWRvY3VtZW50LmpzLm1hcA=="
      }
    },
    {
      "request": {
        "url": "$bot-lang2fhir-document-reference",
        "method": "PUT"
      },
      "resource": {
        "resourceType": "Bot",
        "id": "$bot-lang2fhir-document-id",
        "name": "lang2fhir-document",
        "runtimeVersion": "awslambda",
        "sourceCode": {
          "contentType": "text/typescript",
          "url": "urn:uuid:d331894f-12bb-4406-9bcf-0cab175f80d0"
        },
        "executableCode": {
          "contentType": "text/javascript",
          "url": "urn:uuid:877af9b4-1360-4311-8e4c-6ae5eaa9614f"
        }
      }
    },
    {
      "fullUrl": "urn:uuid:2d5697f6-b80e-4724-a502-80df3bfc66f2",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/typescript",
        "data": "aW1wb3J0IHsgQm90RXZlbnQsIE1lZHBsdW1DbGllbnQgfSBmcm9tICdAbWVkcGx1bS9jb3JlJzsKaW1wb3J0IHsgUXVlc3Rpb25uYWlyZVJlc3BvbnNlLCBPYnNlcnZhdGlvbiwgUHJvY2VkdXJlLCBDb25kaXRpb24sIFBhdGllbnQsIE1lZGljYXRpb25SZXF1ZXN0LCBDYXJlUGxhbiwgUGxhbkRlZmluaXRpb24sIFF1ZXN0aW9ubmFpcmUgfSBmcm9tICdAbWVkcGx1bS9maGlydHlwZXMnOwppbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXInOwoKLyoqCiAqIEEgTWVkcGx1bSBCb3QgdGhhdCBwcm9jZXNzZXMgZG9jdW1lbnRzIHVzaW5nIHRoZSBsYW5nMmZoaXIgQVBJLgogKiAKICogVGhlIGJvdCB3aWxsOgogKiAxLiBTZW5kIHRoZSB0ZXh0IHRvIHRoZSBsYW5nMmZoaXIgQVBJCiAqIDIuIENyZWF0ZSBhIEZISVIgcmVzb3VyY2Ugb2YgdGhlIHR5cGUgc3BlY2lmaWVkIGluIHRoZSBpbnB1dAogKiAzLiBBZGQgdGhlIHBhdGllbnQgcmVmZXJlbmNlIHRvIHRoZSByZXNvdXJjZSAoaWYgdGhlIHJlc291cmNlIGlzIHBhdGllbnQtZGVwZW5kZW50KQogKiAKICogUmVxdWlyZWQgYm90IHNlY3JldHM6IChZb3UgbmVlZCB0byBoYXZlIGFuIGFjdGl2ZSBQaGVub01MIHN1YnNjcmlwdGlvbiB0byB1c2UgdGhpcyBib3QpCiAqIC0gUEhFTk9NTF9FTUFJTDogWW91ciBQaGVub01MIEFQSSBlbWFpbAogKiAtIFBIRU5PTUxfUEFTU1dPUkQ6IFlvdXIgUGhlbm9NTCBBUEkgcGFzc3dvcmQKICovCgppbnRlcmZhY2UgQ3JlYXRlUmVxdWVzdCB7CiAgdGV4dDogc3RyaW5nOwogIHZlcnNpb246IHN0cmluZzsKICByZXNvdXJjZTogc3RyaW5nOwp9CgppbnRlcmZhY2UgQ3JlYXRlQm90SW5wdXQgewogIHRleHQ6IHN0cmluZzsKICByZXNvdXJjZVR5cGU6ICdRdWVzdGlvbm5haXJlUmVzcG9uc2UnIHwgJ09ic2VydmF0aW9uJyB8ICdQcm9jZWR1cmUnIHwgJ0NvbmRpdGlvbicgfCAnTWVkaWNhdGlvblJlcXVlc3QnIHwgJ0NhcmVQbGFuJyB8ICdQbGFuRGVmaW5pdGlvbicgfCAnUXVlc3Rpb25uYWlyZSc7CiAgcGF0aWVudD86IFBhdGllbnQ7Cn0KCnR5cGUgQWxsb3dlZFJlc291cmNlVHlwZXMgPSBRdWVzdGlvbm5haXJlUmVzcG9uc2UgfCBPYnNlcnZhdGlvbiB8IFByb2NlZHVyZSB8IENvbmRpdGlvbiB8IE1lZGljYXRpb25SZXF1ZXN0IHwgQ2FyZVBsYW4gfCBQbGFuRGVmaW5pdGlvbiB8IFF1ZXN0aW9ubmFpcmU7Cgpjb25zdCBQQVRJRU5UX0lOREVQRU5ERU5UX1JFU09VUkNFUyA9IFsnUGxhbkRlZmluaXRpb24nLCAnUXVlc3Rpb25uYWlyZSddIGFzIGNvbnN0Owpjb25zdCBQSEVOT01MX0FQSV9VUkwgPSAiaHR0cHM6Ly9leHBlcmltZW50LnBoZW5vLm1sIjsKCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKAogIG1lZHBsdW06IE1lZHBsdW1DbGllbnQsIAogIGV2ZW50OiBCb3RFdmVudDxDcmVhdGVCb3RJbnB1dD4KKTogUHJvbWlzZTxBbGxvd2VkUmVzb3VyY2VUeXBlcz4gewogIHRyeSB7CiAgICBjb25zdCB7IHRleHQ6IGlucHV0VGV4dCwgcmVzb3VyY2VUeXBlOiBpbnB1dFJlc291cmNlVHlwZSwgcGF0aWVudCB9ID0gZXZlbnQuaW5wdXQ7CgogICAgaWYgKCFpbnB1dFRleHQpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB0ZXh0IGlucHV0IHByb3ZpZGVkIHRvIGJvdCcpOwogICAgfQogICAgaWYgKCFpbnB1dFJlc291cmNlVHlwZSkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHRhcmdldCByZXNvdXJjZSB0eXBlIHByb3ZpZGVkJyk7CiAgICB9CgogICAgLy8gVmFsaWRhdGUgcGF0aWVudCBjb250ZXh0IGZvciBwYXRpZW50LWRlcGVuZGVudCByZXNvdXJjZXMKICAgIGNvbnN0IHJlcXVpcmVzUGF0aWVudCA9ICFQQVRJRU5UX0lOREVQRU5ERU5UX1JFU09VUkNFUy5pbmNsdWRlcyhpbnB1dFJlc291cmNlVHlwZSBhcyBhbnkpOwogICAgaWYgKHJlcXVpcmVzUGF0aWVudCAmJiAhcGF0aWVudCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhdGllbnQgY29udGV4dCBpcyByZXF1aXJlZCBmb3IgcmVzb3VyY2UgdHlwZTogJHtpbnB1dFJlc291cmNlVHlwZX1gKTsKICAgIH0KCiAgICAvLyBMaW1pdGVkIHNldCBvZiByZXNvdXJjZSB0eXBlcwogICAgaWYgKCFbJ1F1ZXN0aW9ubmFpcmUnLCAnUXVlc3Rpb25uYWlyZVJlc3BvbnNlJywgJ09ic2VydmF0aW9uJywgJ1Byb2NlZHVyZScsICdDb25kaXRpb24nLCAnTWVkaWNhdGlvblJlcXVlc3QnLCAnQ2FyZVBsYW4nLCAnUGxhbkRlZmluaXRpb24nXS5pbmNsdWRlcyhpbnB1dFJlc291cmNlVHlwZSkpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCByZXNvdXJjZSB0eXBlOiAke2lucHV0UmVzb3VyY2VUeXBlfWApOwogICAgfQoKICAgIGNvbnN0IHRhcmdldFJlc291cmNlVHlwZSA9IGlucHV0UmVzb3VyY2VUeXBlLnRvTG93ZXJDYXNlKCk7CgogICAgLy8gVHJhbnNmb3JtIHRvIHNwZWNpZmljIHByb2ZpbGVzCiAgICBsZXQgdGFyZ2V0UmVzb3VyY2VQcm9maWxlOiBzdHJpbmc7CiAgICBzd2l0Y2ggKHRhcmdldFJlc291cmNlVHlwZSkgewogICAgICBjYXNlICdvYnNlcnZhdGlvbic6CiAgICAgICAgdGFyZ2V0UmVzb3VyY2VQcm9maWxlID0gJ3NpbXBsZS1vYnNlcnZhdGlvbic7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ2NvbmRpdGlvbic6CiAgICAgICAgdGFyZ2V0UmVzb3VyY2VQcm9maWxlID0gJ2NvbmRpdGlvbi1lbmNvdW50ZXItZGlhZ25vc2lzJzsKICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDoKICAgICAgICB0YXJnZXRSZXNvdXJjZVByb2ZpbGUgPSB0YXJnZXRSZXNvdXJjZVR5cGU7CiAgICB9CgogICAgY29uc3QgZW1haWwgPSBldmVudC5zZWNyZXRzWyJQSEVOT01MX0VNQUlMIl0udmFsdWVTdHJpbmcgYXMgc3RyaW5nOwogICAgY29uc3QgcGFzc3dvcmQgPSBldmVudC5zZWNyZXRzWyJQSEVOT01MX1BBU1NXT1JEIl0udmFsdWVTdHJpbmcgYXMgc3RyaW5nOwoKICAgIC8vIEF1dGggaGFuZGxpbmcgcmVtYWlucyB0aGUgc2FtZQogICAgY29uc3QgY3JlZGVudGlhbHMgPSBCdWZmZXIuZnJvbShgJHtlbWFpbH06JHtwYXNzd29yZH1gKS50b1N0cmluZygnYmFzZTY0Jyk7CiAgICBjb25zdCBhdXRoUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChQSEVOT01MX0FQSV9VUkwgKyAnL2F1dGgvdG9rZW4nLCB7CiAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICBoZWFkZXJzOiB7IAogICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmFzaWMgJHtjcmVkZW50aWFsc31gCiAgICAgIH0sCiAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNvbm5lY3QgdG8gUGhlbm9NTCBBUEk6ICR7ZXJyb3IubWVzc2FnZX1gKTsKICAgIH0pOyAKICAgIAogICAgaWYgKCFhdXRoUmVzcG9uc2Uub2spIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBBdXRoZW50aWNhdGlvbiBmYWlsZWQ6ICR7YXV0aFJlc3BvbnNlLnN0YXR1c30gJHthdXRoUmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTsKICAgIH0KCiAgICBjb25zdCB7IHRva2VuOiBiZWFyZXJUb2tlbiB9ID0gYXdhaXQgYXV0aFJlc3BvbnNlLmpzb24oKSBhcyB7IHRva2VuOiBzdHJpbmcgfTsKICAgIGlmICghYmVhcmVyVG9rZW4pIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB0b2tlbiByZWNlaXZlZCBmcm9tIGF1dGggcmVzcG9uc2UnKTsKICAgIH0KCiAgICBjb25zdCBjcmVhdGVSZXF1ZXN0OiBDcmVhdGVSZXF1ZXN0ID0gewogICAgICB2ZXJzaW9uOiAnUjQnLAogICAgICByZXNvdXJjZTogdGFyZ2V0UmVzb3VyY2VQcm9maWxlLAogICAgICB0ZXh0OiBpbnB1dFRleHQKICAgIH07CgogICAgY29uc3QgY3JlYXRlUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChQSEVOT01MX0FQSV9VUkwgKyAnL2xhbmcyZmhpci9jcmVhdGUnLCB7CiAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShjcmVhdGVSZXF1ZXN0KSwgCiAgICAgIGhlYWRlcnM6IHsgCiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7YmVhcmVyVG9rZW59YCwKICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicKICAgICAgfSwKICAgIH0pOwoKICAgIGlmICghY3JlYXRlUmVzcG9uc2Uub2spIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKGBDcmVhdGUgZmFpbGVkOiAke2NyZWF0ZVJlc3BvbnNlLnN0YXR1c30gJHtjcmVhdGVSZXNwb25zZS5zdGF0dXNUZXh0fWApOwogICAgfQoKICAgIGNvbnN0IGdlbmVyYXRlZFJlc291cmNlID0gYXdhaXQgY3JlYXRlUmVzcG9uc2UuanNvbigpOwogICAgCiAgICAvLyBPbmx5IGFkZCBwYXRpZW50IHJlZmVyZW5jZSBmb3IgcGF0aWVudC1kZXBlbmRlbnQgcmVzb3VyY2VzCiAgICBpZiAocmVxdWlyZXNQYXRpZW50ICYmIHBhdGllbnQpIHsKICAgICAgYWRkUGF0aWVudFJlZmVyZW5jZShnZW5lcmF0ZWRSZXNvdXJjZSwgcGF0aWVudCk7CiAgICB9CgogICAgcmV0dXJuIGdlbmVyYXRlZFJlc291cmNlIGFzIEFsbG93ZWRSZXNvdXJjZVR5cGVzOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoYEJvdCBleGVjdXRpb24gZmFpbGVkOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKX1gKTsKICB9Cn0KCmZ1bmN0aW9uIGFkZFBhdGllbnRSZWZlcmVuY2UocmVzb3VyY2U6IGFueSwgcGF0aWVudDogUGF0aWVudCk6IHZvaWQgewogIGlmICghWydRdWVzdGlvbm5haXJlUmVzcG9uc2UnLCAnT2JzZXJ2YXRpb24nLCAnUHJvY2VkdXJlJywgJ0NvbmRpdGlvbicsICdNZWRpY2F0aW9uUmVxdWVzdCcsICdDYXJlUGxhbiddLmluY2x1ZGVzKHJlc291cmNlLnJlc291cmNlVHlwZSkpIHsKICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgcmVzb3VyY2UgdHlwZSBmb3IgcGF0aWVudCByZWZlcmVuY2U6ICR7cmVzb3VyY2UucmVzb3VyY2VUeXBlfWApOwogIH0KICAKICByZXNvdXJjZS5zdWJqZWN0ID0gewogICAgcmVmZXJlbmNlOiBgUGF0aWVudC8ke3BhdGllbnQuaWR9YCwKICAgIGRpc3BsYXk6IHBhdGllbnQubmFtZT8uWzBdPy50ZXh0IHx8IGBQYXRpZW50LyR7cGF0aWVudC5pZH1gCiAgfTsKfQ=="
      }
    },
    {
      "fullUrl": "urn:uuid:b53b8037-8366-4585-9f87-6258d1f787c9",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/javascript",
        "data": "InVzZSBzdHJpY3QiOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwpleHBvcnRzLmhhbmRsZXIgPSBoYW5kbGVyOwpjb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoImJ1ZmZlciIpOwpjb25zdCBQQVRJRU5UX0lOREVQRU5ERU5UX1JFU09VUkNFUyA9IFsnUGxhbkRlZmluaXRpb24nLCAnUXVlc3Rpb25uYWlyZSddOwpjb25zdCBQSEVOT01MX0FQSV9VUkwgPSAiaHR0cHM6Ly9leHBlcmltZW50LnBoZW5vLm1sIjsKYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihtZWRwbHVtLCBldmVudCkgewogICAgdHJ5IHsKICAgICAgICBjb25zdCB7IHRleHQ6IGlucHV0VGV4dCwgcmVzb3VyY2VUeXBlOiBpbnB1dFJlc291cmNlVHlwZSwgcGF0aWVudCB9ID0gZXZlbnQuaW5wdXQ7CiAgICAgICAgaWYgKCFpbnB1dFRleHQpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB0ZXh0IGlucHV0IHByb3ZpZGVkIHRvIGJvdCcpOwogICAgICAgIH0KICAgICAgICBpZiAoIWlucHV0UmVzb3VyY2VUeXBlKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdGFyZ2V0IHJlc291cmNlIHR5cGUgcHJvdmlkZWQnKTsKICAgICAgICB9CiAgICAgICAgLy8gVmFsaWRhdGUgcGF0aWVudCBjb250ZXh0IGZvciBwYXRpZW50LWRlcGVuZGVudCByZXNvdXJjZXMKICAgICAgICBjb25zdCByZXF1aXJlc1BhdGllbnQgPSAhUEFUSUVOVF9JTkRFUEVOREVOVF9SRVNPVVJDRVMuaW5jbHVkZXMoaW5wdXRSZXNvdXJjZVR5cGUpOwogICAgICAgIGlmIChyZXF1aXJlc1BhdGllbnQgJiYgIXBhdGllbnQpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXRpZW50IGNvbnRleHQgaXMgcmVxdWlyZWQgZm9yIHJlc291cmNlIHR5cGU6ICR7aW5wdXRSZXNvdXJjZVR5cGV9YCk7CiAgICAgICAgfQogICAgICAgIC8vIExpbWl0ZWQgc2V0IG9mIHJlc291cmNlIHR5cGVzCiAgICAgICAgaWYgKCFbJ1F1ZXN0aW9ubmFpcmUnLCAnUXVlc3Rpb25uYWlyZVJlc3BvbnNlJywgJ09ic2VydmF0aW9uJywgJ1Byb2NlZHVyZScsICdDb25kaXRpb24nLCAnTWVkaWNhdGlvblJlcXVlc3QnLCAnQ2FyZVBsYW4nLCAnUGxhbkRlZmluaXRpb24nXS5pbmNsdWRlcyhpbnB1dFJlc291cmNlVHlwZSkpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCByZXNvdXJjZSB0eXBlOiAke2lucHV0UmVzb3VyY2VUeXBlfWApOwogICAgICAgIH0KICAgICAgICBjb25zdCB0YXJnZXRSZXNvdXJjZVR5cGUgPSBpbnB1dFJlc291cmNlVHlwZS50b0xvd2VyQ2FzZSgpOwogICAgICAgIC8vIFRyYW5zZm9ybSB0byBzcGVjaWZpYyBwcm9maWxlcwogICAgICAgIGxldCB0YXJnZXRSZXNvdXJjZVByb2ZpbGU7CiAgICAgICAgc3dpdGNoICh0YXJnZXRSZXNvdXJjZVR5cGUpIHsKICAgICAgICAgICAgY2FzZSAnb2JzZXJ2YXRpb24nOgogICAgICAgICAgICAgICAgdGFyZ2V0UmVzb3VyY2VQcm9maWxlID0gJ3NpbXBsZS1vYnNlcnZhdGlvbic7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAnY29uZGl0aW9uJzoKICAgICAgICAgICAgICAgIHRhcmdldFJlc291cmNlUHJvZmlsZSA9ICdjb25kaXRpb24tZW5jb3VudGVyLWRpYWdub3Npcyc7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHRhcmdldFJlc291cmNlUHJvZmlsZSA9IHRhcmdldFJlc291cmNlVHlwZTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZW1haWwgPSBldmVudC5zZWNyZXRzWyJQSEVOT01MX0VNQUlMIl0udmFsdWVTdHJpbmc7CiAgICAgICAgY29uc3QgcGFzc3dvcmQgPSBldmVudC5zZWNyZXRzWyJQSEVOT01MX1BBU1NXT1JEIl0udmFsdWVTdHJpbmc7CiAgICAgICAgLy8gQXV0aCBoYW5kbGluZyByZW1haW5zIHRoZSBzYW1lCiAgICAgICAgY29uc3QgY3JlZGVudGlhbHMgPSBidWZmZXJfMS5CdWZmZXIuZnJvbShgJHtlbWFpbH06JHtwYXNzd29yZH1gKS50b1N0cmluZygnYmFzZTY0Jyk7CiAgICAgICAgY29uc3QgYXV0aFJlc3BvbnNlID0gYXdhaXQgZmV0Y2goUEhFTk9NTF9BUElfVVJMICsgJy9hdXRoL3Rva2VuJywgewogICAgICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJhc2ljICR7Y3JlZGVudGlhbHN9YAogICAgICAgICAgICB9LAogICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gY29ubmVjdCB0byBQaGVub01MIEFQSTogJHtlcnJvci5tZXNzYWdlfWApOwogICAgICAgIH0pOwogICAgICAgIGlmICghYXV0aFJlc3BvbnNlLm9rKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQXV0aGVudGljYXRpb24gZmFpbGVkOiAke2F1dGhSZXNwb25zZS5zdGF0dXN9ICR7YXV0aFJlc3BvbnNlLnN0YXR1c1RleHR9YCk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IHsgdG9rZW46IGJlYXJlclRva2VuIH0gPSBhd2FpdCBhdXRoUmVzcG9uc2UuanNvbigpOwogICAgICAgIGlmICghYmVhcmVyVG9rZW4pIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB0b2tlbiByZWNlaXZlZCBmcm9tIGF1dGggcmVzcG9uc2UnKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgY3JlYXRlUmVxdWVzdCA9IHsKICAgICAgICAgICAgdmVyc2lvbjogJ1I0JywKICAgICAgICAgICAgcmVzb3VyY2U6IHRhcmdldFJlc291cmNlUHJvZmlsZSwKICAgICAgICAgICAgdGV4dDogaW5wdXRUZXh0CiAgICAgICAgfTsKICAgICAgICBjb25zdCBjcmVhdGVSZXNwb25zZSA9IGF3YWl0IGZldGNoKFBIRU5PTUxfQVBJX1VSTCArICcvbGFuZzJmaGlyL2NyZWF0ZScsIHsKICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGNyZWF0ZVJlcXVlc3QpLAogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHtiZWFyZXJUb2tlbn1gLAogICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicKICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgICAgICBpZiAoIWNyZWF0ZVJlc3BvbnNlLm9rKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ3JlYXRlIGZhaWxlZDogJHtjcmVhdGVSZXNwb25zZS5zdGF0dXN9ICR7Y3JlYXRlUmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTsKICAgICAgICB9CiAgICAgICAgY29uc3QgZ2VuZXJhdGVkUmVzb3VyY2UgPSBhd2FpdCBjcmVhdGVSZXNwb25zZS5qc29uKCk7CiAgICAgICAgLy8gT25seSBhZGQgcGF0aWVudCByZWZlcmVuY2UgZm9yIHBhdGllbnQtZGVwZW5kZW50IHJlc291cmNlcwogICAgICAgIGlmIChyZXF1aXJlc1BhdGllbnQgJiYgcGF0aWVudCkgewogICAgICAgICAgICBhZGRQYXRpZW50UmVmZXJlbmNlKGdlbmVyYXRlZFJlc291cmNlLCBwYXRpZW50KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGdlbmVyYXRlZFJlc291cmNlOwogICAgfQogICAgY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBCb3QgZXhlY3V0aW9uIGZhaWxlZDogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcil9YCk7CiAgICB9Cn0KZnVuY3Rpb24gYWRkUGF0aWVudFJlZmVyZW5jZShyZXNvdXJjZSwgcGF0aWVudCkgewogICAgdmFyIF9hLCBfYjsKICAgIGlmICghWydRdWVzdGlvbm5haXJlUmVzcG9uc2UnLCAnT2JzZXJ2YXRpb24nLCAnUHJvY2VkdXJlJywgJ0NvbmRpdGlvbicsICdNZWRpY2F0aW9uUmVxdWVzdCcsICdDYXJlUGxhbiddLmluY2x1ZGVzKHJlc291cmNlLnJlc291cmNlVHlwZSkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHJlc291cmNlIHR5cGUgZm9yIHBhdGllbnQgcmVmZXJlbmNlOiAke3Jlc291cmNlLnJlc291cmNlVHlwZX1gKTsKICAgIH0KICAgIHJlc291cmNlLnN1YmplY3QgPSB7CiAgICAgICAgcmVmZXJlbmNlOiBgUGF0aWVudC8ke3BhdGllbnQuaWR9YCwKICAgICAgICBkaXNwbGF5OiAoKF9iID0gKF9hID0gcGF0aWVudC5uYW1lKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbMF0pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi50ZXh0KSB8fCBgUGF0aWVudC8ke3BhdGllbnQuaWR9YAogICAgfTsKfQovLyMgc291cmNlTWFwcGluZ1VSTD1sYW5nMmZoaXItY3JlYXRlLmpzLm1hcA=="
      }
    },
    {
      "request": {
        "url": "$bot-lang2fhir-create-reference",
        "method": "PUT"
      },
      "resource": {
        "resourceType": "Bot",
        "id": "$bot-lang2fhir-create-id",
        "name": "lang2fhir-create",
        "runtimeVersion": "awslambda",
        "sourceCode": {
          "contentType": "text/typescript",
          "url": "urn:uuid:2d5697f6-b80e-4724-a502-80df3bfc66f2"
        },
        "executableCode": {
          "contentType": "text/javascript",
          "url": "urn:uuid:b53b8037-8366-4585-9f87-6258d1f787c9"
        }
      }
    },
    {
      "fullUrl": "urn:uuid:c28da0f7-b223-403b-a9fe-534dad0413d9",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/typescript",
        "data": ""
      }
    },
    {
      "fullUrl": "urn:uuid:88d1f844-77fd-40d6-9c60-ce8a9d9194ab",
      "request": {
        "method": "POST",
        "url": "Binary"
      },
      "resource": {
        "resourceType": "Binary",
        "contentType": "text/javascript",
        "data": "InVzZSBzdHJpY3QiOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwpleHBvcnRzLmhhbmRsZXIgPSBoYW5kbGVyOwpjb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoImJ1ZmZlciIpOwpjb25zdCBQSEVOT01MX0FQSV9VUkwgPSAiaHR0cHM6Ly9leHBlcmltZW50LnBoZW5vLm1sIjsKYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihtZWRwbHVtLCBldmVudCkgewogICAgY29uc3QgZW1haWwgPSBldmVudC5zZWNyZXRzWyJQSEVOT01MX0VNQUlMIl0udmFsdWVTdHJpbmc7CiAgICBjb25zdCBwYXNzd29yZCA9IGV2ZW50LnNlY3JldHNbIlBIRU5PTUxfUEFTU1dPUkQiXS52YWx1ZVN0cmluZzsKICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oYCR7ZW1haWx9OiR7cGFzc3dvcmR9YCkudG9TdHJpbmcoJ2Jhc2U2NCcpOwogICAgY29uc3QgY29ob3J0UmVzcG9uc2UgPSBhd2FpdCBzdWJtaXRDb2hvcnRSZXF1ZXN0KGV2ZW50LmlucHV0LCBjcmVkZW50aWFscyk7CiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjcmVhdGVDb2hvcnRHcm91cChtZWRwbHVtLCBjb2hvcnRSZXNwb25zZSk7CiAgICByZXR1cm4gcmVzdWx0Owp9Ci8vIEF1dGhlbnRpY2F0ZXMgYW5kIHN1Ym1pdHMgcmVxdWVzdCB0byBQaGVub01MIEFQSS4KYXN5bmMgZnVuY3Rpb24gc3VibWl0Q29ob3J0UmVxdWVzdChjb2hvcnRSZXF1ZXN0VGV4dCwgY3JlZGVudGlhbHMpIHsKICAgIC8vIEdldCBhdXRoIHRva2VuIHVzaW5nIEJhc2ljIEF1dGgKICAgIGNvbnN0IGF1dGhSZXNwb25zZSA9IGF3YWl0IGZldGNoKFBIRU5PTUxfQVBJX1VSTCArICcvYXV0aC90b2tlbicsIHsKICAgICAgICBtZXRob2Q6ICdQT1NUJywKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJhc2ljICR7Y3JlZGVudGlhbHN9YAogICAgICAgIH0sCiAgICB9KS5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gY29ubmVjdCB0byBQaGVub01MIEFQSTogJHtlcnJvci5tZXNzYWdlfWApOwogICAgfSk7CiAgICBpZiAoIWF1dGhSZXNwb25zZS5vaykgewogICAgICAgIHRocm93IG5ldyBFcnJvcihgQXV0aGVudGljYXRpb24gZmFpbGVkOiAke2F1dGhSZXNwb25zZS5zdGF0dXN9ICR7YXV0aFJlc3BvbnNlLnN0YXR1c1RleHR9YCk7CiAgICB9CiAgICBjb25zdCB7IHRva2VuOiBiZWFyZXJUb2tlbiB9ID0gYXdhaXQgYXV0aFJlc3BvbnNlLmpzb24oKTsKICAgIGlmICghYmVhcmVyVG9rZW4pIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHRva2VuIHJlY2VpdmVkIGZyb20gYXV0aCByZXNwb25zZScpOwogICAgfQogICAgY29uc3QgY29ob3J0UmVzcG9uc2UgPSBhd2FpdCBmZXRjaChQSEVOT01MX0FQSV9VUkwgKyAnL2NvbnN0cnVlL2NvaG9ydCcsIHsKICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShjb2hvcnRSZXF1ZXN0VGV4dCksCiAgICAgICAgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7YmVhcmVyVG9rZW59YCwgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiB9LAogICAgfSk7CiAgICBpZiAoIWNvaG9ydFJlc3BvbnNlLm9rKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggY29ob3J0IHF1ZXJpZXM6ICR7Y29ob3J0UmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTsKICAgIH0KICAgIGNvbnN0IGNvaG9ydFJlc3VsdCA9IGF3YWl0IGNvaG9ydFJlc3BvbnNlLmpzb24oKTsKICAgIHJldHVybiBjb2hvcnRSZXN1bHQ7Cn0KLy8gQ3JlYXRlcyBhIEZISVIgR3JvdXAgcmVzb3VyY2UgY29udGFpbmluZyB0aGUgY29ob3J0IHBhdGllbnRzLgphc3luYyBmdW5jdGlvbiBjcmVhdGVDb2hvcnRHcm91cChtZWRwbHVtLCBjb2hvcnRPdXRwdXQpIHsKICAgIGxldCBjdXJyZW50UGF0aWVudElkcyA9IFtdOwogICAgY29uc3QgZXh0ZW5zaW9ucyA9IFtdOwogICAgZm9yIChjb25zdCBxdWVyeSBvZiBjb2hvcnRPdXRwdXQucXVlcmllcykgewogICAgICAgIGNvbnN0IHBhdGllbnRJZHMgPSBhd2FpdCBleGVjdXRlUXVlcnkobWVkcGx1bSwgcXVlcnkpOwogICAgICAgIGlmIChjdXJyZW50UGF0aWVudElkcy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgY3VycmVudFBhdGllbnRJZHMgPSBwYXRpZW50SWRzOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgY3VycmVudFBhdGllbnRJZHMgPSBwZXJmb3JtU2V0T3BlcmF0aW9uKHF1ZXJ5LmV4Y2x1ZGUsIGN1cnJlbnRQYXRpZW50SWRzLCBwYXRpZW50SWRzKTsKICAgICAgICB9CiAgICAgICAgLy8gSWYgeW91IHdhbnQgdG8gYWRkIGV4dGVuc2lvbnMgdG8gdGhlIGdyb3VwIHJlc291cmNlIGZvciB0cmFjZWFiaWxpdHkgcHVycG9zZXMsIHlvdSBjYW4gZG8gc28gaGVyZS4gCiAgICAgICAgY29uc3QgZXh0ZW5zaW9uRWxlbWVudHMgPSBbCiAgICAgICAgICAgIHsgdXJsOiAicXVlcnkiLCB2YWx1ZVN0cmluZzogcXVlcnkuc2VhcmNoUGFyYW1zIH0sCiAgICAgICAgICAgIHsgdXJsOiAiZXhjbHVkZSIsIHZhbHVlQm9vbGVhbjogcXVlcnkuZXhjbHVkZSB9LAogICAgICAgIF07CiAgICAgICAgaWYgKHF1ZXJ5LnJhdGlvbmFsZSkgewogICAgICAgICAgICBleHRlbnNpb25FbGVtZW50cy5wdXNoKHsgdXJsOiAicmF0aW9uYWxlIiwgdmFsdWVTdHJpbmc6IHF1ZXJ5LnJhdGlvbmFsZSB9KTsKICAgICAgICB9CiAgICAgICAgZXh0ZW5zaW9ucy5wdXNoKHsKICAgICAgICAgICAgdXJsOiAiY3JpdGVyaWEiLAogICAgICAgICAgICBleHRlbnNpb246IGV4dGVuc2lvbkVsZW1lbnRzLAogICAgICAgIH0pOwogICAgfQogICAgY29uc3QgdW5pcXVlUGF0aWVudElkc1NldCA9IG5ldyBTZXQoY3VycmVudFBhdGllbnRJZHMpOwogICAgY29uc3QgdW5pcXVlUGF0aWVudElkcyA9IEFycmF5LmZyb20odW5pcXVlUGF0aWVudElkc1NldCk7CiAgICBjb25zdCB1bmlxdWVNZW1iZXJzID0gdW5pcXVlUGF0aWVudElkcy5tYXAoaWQgPT4gKHsKICAgICAgICBlbnRpdHk6IHsgcmVmZXJlbmNlOiBgUGF0aWVudC8ke2lkfWAgfQogICAgfSkpOwogICAgLy8gU2V0IHRoZSBpZGVudGlmaWVyIGZvciB0aGUgZ3JvdXAgdG8gYmUgdGhlIGNvaG9ydCBkZXNjcmlwdGlvbgogICAgY29uc3QgaWRlbnRpZmllclZhbHVlID0gKGNvaG9ydE91dHB1dC5jb2hvcnREZXNjcmlwdGlvbiB8fCAnQ29ob3J0IEdyb3VwJykucmVwbGFjZSgvXHMrL2csICctJyk7CiAgICBjb25zdCBpZGVudGlmaWVyID0geyB2YWx1ZTogaWRlbnRpZmllclZhbHVlIH07CiAgICAvLyBDcmVhdGUgdGhlIGdyb3VwIHJlc291cmNlIHdpdGggZXh0ZW5zaW9ucyBmb3IgdHJhY2VhYmlsaXR5IHB1cnBvc2VzIGlmIGRlc2lyZWQuIAogICAgY29uc3QgY3JlYXRlZEdyb3VwID0gYXdhaXQgbWVkcGx1bS5jcmVhdGVSZXNvdXJjZSh7CiAgICAgICAgcmVzb3VyY2VUeXBlOiAiR3JvdXAiLAogICAgICAgIG5hbWU6IGNvaG9ydE91dHB1dC5jb2hvcnREZXNjcmlwdGlvbiB8fCAiQ29ob3J0IEdyb3VwIiwKICAgICAgICBhY3RpdmU6IGZhbHNlLAogICAgICAgIHR5cGU6ICJwZXJzb24iLAogICAgICAgIGFjdHVhbDogdHJ1ZSwKICAgICAgICBleHRlbnNpb246IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdXJsOiAiaHR0cHM6Ly95b3VyLW9yZ2FuaXphdGlvbi5jb20vZmhpci9TdHJ1Y3R1cmVEZWZpbml0aW9uL2NvaG9ydC1xdWVyeSIsCiAgICAgICAgICAgICAgICBleHRlbnNpb246IGV4dGVuc2lvbnMsCiAgICAgICAgICAgIH0sCiAgICAgICAgXSwKICAgICAgICBpZGVudGlmaWVyOiBbaWRlbnRpZmllcl0sCiAgICAgICAgbWVtYmVyOiB1bmlxdWVNZW1iZXJzLAogICAgfSk7CiAgICByZXR1cm4gY3JlYXRlZEdyb3VwOwp9Ci8vIEV4ZWN1dGVzIGEgc2luZ2xlIEZISVIgcXVlcnkgd2l0aCBwYWdpbmF0aW9uIGFuZCBleHRyYWN0cyBwYXRpZW50IElEcy4KYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZVF1ZXJ5KG1lZHBsdW0sIHF1ZXJ5Q29uZmlnKSB7CiAgICBjb25zdCB7IHJlc291cmNlLCBzZWFyY2hQYXJhbXMgfSA9IHF1ZXJ5Q29uZmlnOwogICAgY29uc3QgcGF0aWVudElkcyA9IFtdOwogICAgZm9yIGF3YWl0IChjb25zdCBwYWdlIG9mIG1lZHBsdW0uc2VhcmNoUmVzb3VyY2VQYWdlcyhyZXNvdXJjZSwgc2VhcmNoUGFyYW1zKSkgewogICAgICAgIGNvbnN0IGV4dHJhY3RlZElkcyA9IGV4dHJhY3RQYXRpZW50SWRzKHBhZ2UpOwogICAgICAgIHBhdGllbnRJZHMucHVzaCguLi5leHRyYWN0ZWRJZHMubWFwKChkYXRhKSA9PiBkYXRhLnBhdGllbnRJZCkpOwogICAgfQogICAgcmV0dXJuIHBhdGllbnRJZHM7Cn0KLy8gRXh0cmFjdHMgcGF0aWVudCBJRHMgZnJvbSBGSElSIHJlc291cmNlcy4KZnVuY3Rpb24gZXh0cmFjdFBhdGllbnRJZHMocmVzb3VyY2VzKSB7CiAgICByZXR1cm4gcmVzb3VyY2VzCiAgICAgICAgLm1hcCgocmVzb3VyY2UpID0+IHsKICAgICAgICB2YXIgX2EsIF9iOwogICAgICAgIGNvbnN0IHBhdGllbnRJZCA9IHJlc291cmNlLnJlc291cmNlVHlwZSA9PT0gIlBhdGllbnQiCiAgICAgICAgICAgID8gcmVzb3VyY2UuaWQKICAgICAgICAgICAgOiAoX2IgPSAoX2EgPSByZXNvdXJjZS5zdWJqZWN0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVmZXJlbmNlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iuc3BsaXQoIi8iKVsxXTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBwYXRpZW50SWQ6IHBhdGllbnRJZCB8fCAiIiwKICAgICAgICB9OwogICAgfSkKICAgICAgICAuZmlsdGVyKChkYXRhKSA9PiBkYXRhLnBhdGllbnRJZCAhPT0gIiIpOwp9Ci8vIFBlcmZvcm1zIHNldCBvcGVyYXRpb25zIG9uIHBhdGllbnQgSUQgYXJyYXlzLgpmdW5jdGlvbiBwZXJmb3JtU2V0T3BlcmF0aW9uKGV4Y2x1ZGUsIHNldEEsIHNldEIpIHsKICAgIHJldHVybiBzZXRBLmZpbHRlcigoaWQpID0+IGV4Y2x1ZGUKICAgICAgICA/ICFzZXRCLmluY2x1ZGVzKGlkKQogICAgICAgIDogc2V0Qi5pbmNsdWRlcyhpZCkpOwp9Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPXBoZW5vbWwtY29ob3J0LmpzLm1hcA=="
      }
    },
    {
      "request": {
        "url": "$bot-phenoml-cohort-reference",
        "method": "PUT"
      },
      "resource": {
        "resourceType": "Bot",
        "id": "$bot-phenoml-cohort-id",
        "name": "phenoml-cohort",
        "runtimeVersion": "awslambda",
        "sourceCode": {
          "contentType": "text/typescript",
          "url": "urn:uuid:c28da0f7-b223-403b-a9fe-534dad0413d9"
        },
        "executableCode": {
          "contentType": "text/javascript",
          "url": "urn:uuid:88d1f844-77fd-40d6-9c60-ce8a9d9194ab"
        }
      }
    }
  ]
}